generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid())
  name            String       @unique
  email           String       @unique
  phone           String       @unique
  password        String
  profile_picture String?
  gender          String?
  niu             String?
  displayName     String?
  is_active       Boolean      @default(true)
  is_admin        Boolean      @default(false)
  is_staff        Boolean      @default(false)
  Department      Department[]
  employee        Employee?
}

model Employee {
  id              String          @id @default(uuid())
  id_level        String
  id_grade        String
  id_department   String?
  id_user         String          @unique
  id_entity       String
  id_function     String?
  id_role         String?
  is_active       Boolean         @default(true)
  account         Account[]
  bankAccount     BankAccount[]
  Departement     Department?     @relation(fields: [id_department], references: [id], onDelete: Cascade)
  entity          Entity          @relation(fields: [id_entity], references: [id])
  Function        Function?       @relation(fields: [id_function], references: [id])
  Grade           Grade           @relation(fields: [id_grade], references: [id], onDelete: Cascade)
  EchelonCategory EchelonCategory @relation(fields: [id_level], references: [id], onDelete: Cascade)
  role            Role?           @relation(fields: [id_role], references: [id])
  User            User            @relation(fields: [id_user], references: [id], onDelete: Cascade)
  employee_bank   EmployeeBank[]

  @@index([id_department], map: "Employee_id_department_fkey")
  @@index([id_entity], map: "Employee_id_entity_fkey")
  @@index([id_function], map: "Employee_id_function_fkey")
  @@index([id_grade], map: "Employee_id_grade_fkey")
  @@index([id_level], map: "Employee_id_level_fkey")
  @@index([id_role], map: "Employee_id_role_fkey")
}

model Role {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  name        String?
  displayName String?
  power       Int        @default(0)
  isActive    Boolean    @default(true)
  employee    Employee[]
}

model EmployeeRole {
  id          String   @id @default(uuid())
  id_employee String
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)
}

model Function {
  id          String     @id @default(uuid())
  name        String
  displayName String?
  power       Int?       @default(0)
  createdAt   DateTime   @default(now())
  isActive    Boolean    @default(true)
  employee    Employee[]
}

model Entity {
  id              String           @id @default(uuid())
  Sigle           String?
  raison_social   String
  logo            String?
  niu             String?
  createdAt       DateTime         @default(now())
  isActive        Boolean          @default(true)
  displayName     String?
  account         Account[]
  associer        Associer[]
  bankAccount     BankAccount[]
  cashDesks       CashDesk[]
  department      Department[]
  employee        Employee[]
  entity_bank     EntityBank[]
  external_entity ExternalEntity[]
  Product         Product[]
  site            Site[]
}

model Associer {
  id                 String         @id @default(uuid())
  id_entity          String
  id_external_entity String
  isActive           Boolean        @default(true)
  createdAt          DateTime       @default(now())
  entity             Entity         @relation(fields: [id_entity], references: [id])
  external_entity    ExternalEntity @relation(fields: [id_external_entity], references: [id])

  @@index([id_entity], map: "Associer_id_entity_fkey")
  @@index([id_external_entity], map: "Associer_id_external_entity_fkey")
}

model ExternalEntity {
  id              String               @id @default(uuid())
  isActive        Boolean              @default(true)
  name            String
  displayName     String?
  id_entity       String?
  createdAt       DateTime             @default(now())
  account         Account[]
  associer        Associer[]
  bankAccount     BankAccount[]
  entity          Entity?              @relation(fields: [id_entity], references: [id])
  external_entity ExternalEntityBank[]
  type            Type_Entity[]

  @@index([id_entity], map: "ExternalEntity_id_entity_fkey")
}

model Type_Entity {
  id             String         @id @default(uuid())
  isActive       Boolean        @default(true)
  id_entity      String
  id_type        String
  createdAt      DateTime       @default(now())
  ExternalEntity ExternalEntity @relation(fields: [id_entity], references: [id], onDelete: Cascade)
  type           Type           @relation(fields: [id_type], references: [id], onDelete: Cascade)

  @@index([id_entity], map: "Type_Entity_id_entity_fkey")
  @@index([id_type], map: "Type_Entity_id_type_fkey")
}

model Type {
  id        String        @id @default(uuid())
  isActive  Boolean       @default(true)
  name      String?
  createdAt DateTime      @default(now())
  type      Type_Entity[]
}

model Department {
  id          String     @id @default(uuid())
  isActive    Boolean?   @default(true)
  id_entity   String
  name        String
  displayName String?
  description String?
  budget      Float?
  id_employee String?
  id_user     String?
  createdAt   DateTime   @default(now())
  Entity      Entity     @relation(fields: [id_entity], references: [id], onDelete: Cascade)
  User        User?      @relation(fields: [id_user], references: [id], onDelete: Cascade)
  employee    Employee[]

  @@index([id_entity], map: "Department_id_entity_fkey")
  @@index([id_user], map: "Department_id_user_fkey")
}

model Grade {
  id          String     @id @default(uuid())
  isActive    Boolean    @default(true)
  name        String
  displayName String?
  power       Int        @default(0)
  createdAt   DateTime   @default(now())
  employee    Employee[]
}

model EchelonCategory {
  id          String     @id @default(uuid())
  isActive    Boolean    @default(true)
  name        String
  displayName String?
  category    String
  power       Int        @default(0)
  createdAt   DateTime   @default(now())
  employee    Employee[]
}

model Site {
  id          String   @id @default(uuid())
  isActive    Boolean  @default(true)
  name        String
  displayName String?
  type        TypeSite @default(ONFIELD)
  id_entity   String
  createdAt   DateTime @default(now())
  Entity      Entity   @relation(fields: [id_entity], references: [id])

  @@index([id_entity], map: "Site_id_entity_fkey")
}

model EntityBank {
  id        String   @id @default(uuid())
  isActive  Boolean  @default(true)
  id_entity String
  id_bank   String
  createdAt DateTime @default(now())
  bank      Bank     @relation(fields: [id_bank], references: [id])
  entity    Entity   @relation(fields: [id_entity], references: [id])

  @@index([id_bank], map: "EntityBank_id_bank_fkey")
  @@index([id_entity], map: "EntityBank_id_entity_fkey")
}

model ExternalEntityBank {
  id                 String         @id @default(uuid())
  isActive           Boolean        @default(true)
  id_external_entity String
  id_bank            String
  createdAt          DateTime       @default(now())
  bank               Bank           @relation(fields: [id_bank], references: [id])
  external_entity    ExternalEntity @relation(fields: [id_external_entity], references: [id])

  @@index([id_bank], map: "ExternalEntityBank_id_bank_fkey")
  @@index([id_external_entity], map: "ExternalEntityBank_id_external_entity_fkey")
}

model EmployeeBank {
  id          String   @id @default(uuid())
  id_employee String
  id_bank     String
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)
  bank        Bank     @relation(fields: [id_bank], references: [id])
  employee    Employee @relation(fields: [id_employee], references: [id])

  @@index([id_bank], map: "EmployeeBank_id_bank_fkey")
  @@index([id_employee], map: "EmployeeBank_id_employee_fkey")
}

model Bank {
  id                   String               @id @default(uuid())
  name                 String
  displayName          String?
  sigle                String
  Acronyme             String
  createdAt            DateTime             @default(now())
  isActive             Boolean              @default(true)
  bank_account         BankAccount[]
  employee_bank        EmployeeBank[]
  entity_bank          EntityBank[]
  external_entity_bank ExternalEntityBank[]
}

model BankAccount {
  id                 String          @id @default(uuid())
  account_number     String
  amount             String
  cardNumber         String?
  id_employee        String?
  id_entity          String?
  id_external_entity String?
  id_bank            String
  createdAt          DateTime        @default(now())
  isActive           Boolean         @default(true)
  Bank               Bank            @relation(fields: [id_bank], references: [id])
  employee           Employee?       @relation(fields: [id_employee], references: [id])
  entity             Entity?         @relation(fields: [id_entity], references: [id])
  externalEntity     ExternalEntity? @relation(fields: [id_external_entity], references: [id])

  @@index([id_bank], map: "BankAccount_id_bank_fkey")
  @@index([id_employee], map: "BankAccount_id_employee_fkey")
  @@index([id_entity], map: "BankAccount_id_entity_fkey")
  @@index([id_external_entity], map: "BankAccount_id_external_entity_fkey")
}

model Account {
  id               String          @id @default(uuid())
  name             String          @unique
  displayName      String?
  amount           Float?          @default(0)
  createdAt        DateTime        @default(now())
  idOperator       String
  idEntity         String?
  idEmployee       String?
  idExternalEntity String?
  isActive         Boolean         @default(true)
  employee         Employee?       @relation(fields: [idEmployee], references: [id])
  entity           Entity?         @relation(fields: [idEntity], references: [id])
  externalEntity   ExternalEntity? @relation(fields: [idExternalEntity], references: [id])
  operator         Operator        @relation(fields: [idOperator], references: [id])

  @@index([idEmployee], map: "Account_idEmployee_fkey")
  @@index([idEntity], map: "Account_idEntity_fkey")
  @@index([idExternalEntity], map: "Account_idExternalEntity_fkey")
  @@index([idOperator], map: "Account_idOperator_fkey")
}

model Operator {
  id          String      @id @default(uuid())
  name        String
  type        AccountType @default(MOBILE)
  displayName String
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  accounts    Account[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  displayName String?
  unit        Float?
  description String
  id_entity   String
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)
  Entity      Entity   @relation(fields: [id_entity], references: [id])

  @@index([id_entity], map: "Product_id_entity_fkey")
}

model CashDesk {
  id          String   @id @default(uuid())
  name        String
  displayName String?
  amount      Float?
  idEntity    String
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)
  entity      Entity   @relation(fields: [idEntity], references: [id])

  @@index([idEntity], map: "CashDesk_idEntity_fkey")
}

model Currency {
  id           String         @id @default(uuid())
  code         String
  name         String
  displayName  String?
  symbol       String
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  currencyCuts CurrencyCuts[]
}

model CurrencyCuts {
  id         String       @id @default(uuid())
  value      Float
  type       CurrencyType
  currencyId String
  createdAt  DateTime     @default(now())
  isActive   Boolean      @default(true)
  currency   Currency     @relation(fields: [currencyId], references: [id])

  @@index([currencyId], map: "CurrencyCuts_currencyId_fkey")
}

enum TypeSite {
  HEADQUARTER
  ONFIELD
}

enum CurrencyType {
  CASH
  COIN
}

enum AccountType {
  MOBILE
  CRYPTO
}
