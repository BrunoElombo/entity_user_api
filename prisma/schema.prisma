

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id        String      @id @default(uuid())
  name String @unique
  email String @unique
  phone String @unique
  password String
  profile_picture String?
  gender String?
  niu String?

  is_active Boolean @default(true)
  is_admin Boolean @default(false)
  is_staff Boolean @default(false)

  employee Employee? 
  Department Department[]
}

model Employee {

  id             String  @id @default(uuid())
  id_level       String
  id_grade       String
  id_department    String? 
  id_user        String @unique
  id_entity String
  id_function String?
  id_role String?
  is_active Boolean @default(true)
  
  entity Entity @relation(fields: [id_entity], references: [id])
  Function Function? @relation(fields: [id_function], references: [id])
  role Role? @relation(fields: [id_role], references: [id])
  Departement Department? @relation(fields: [id_department], references: [id], onDelete: Cascade)
  EchelonCategory EchelonCategory @relation(fields: [id_level], references: [id], onDelete: Cascade)
  Grade          Grade      @relation(fields: [id_grade], references: [id], onDelete: Cascade)
  User           User      @relation(fields: [id_user], references: [id], onDelete: Cascade)

  employee_bank EmployeeBank[]
  bankAccount BankAccount[]
}


model Role{
  id String @id @default(uuid())
  name String?
  power Int @default(0)
  employee Employee[]
}

model EmployeeRole{
  id String @id @default(uuid())
  id_employee String
  // Employee Employee @relation(fields: [id_employee], references: [id])
}

model Function {
  id       String  @id @default(uuid())
  name       String
  power      Int? @default(0)
  
  employee Employee[]
}

model Entity {
  id       String  @id @default(uuid())
  Sigle      String?
  raison_social String
  logo String?
  niu        String?

  department Department[]
  employee Employee[]
  site Site[]
  Product Product[]
  entity_bank EntityBank []
  external_entity ExternalEntity[]
  associer Associer[]
  
  bankAccount BankAccount[]
}


model Associer{
  id String @id @default(uuid())
  id_entity String
  id_external_entity String

  entity Entity @relation(fields: [id_entity], references: [id])
  external_entity ExternalEntity @relation(fields: [id_external_entity], references: [id])
}
model ExternalEntity{
  id String @id @default(uuid())
  name String
  id_entity String
  entity Entity @relation(fields: [id_entity], references: [id])

  type Type_Entity[]
  external_entity ExternalEntityBank[]
  associer Associer[]
  bankAccount BankAccount[]
}

model Type_Entity{
  id String @id @default(uuid())
  id_entity String
  ExternalEntity ExternalEntity @relation(fields: [id_entity], references: [id], onDelete: Cascade)
  id_type String
  type Type @relation(fields: [id_type], references: [id], onDelete: Cascade)

}

model Type{
  id String @id @default(uuid())
  name String?

  type Type_Entity[]
}

model Department {
  id       String  @id @default(uuid())
  id_entity  String
  name String
  description String
  budget     Float?
  id_employee String?
  id_user String?
  User User? @relation(fields: [id_user], references: [id], onDelete: Cascade)
  Entity     Entity  @relation(fields: [id_entity], references: [id], onDelete: Cascade)
  employee Employee []
  // fonction Function[]
}

model Grade {
  id       String  @id @default(uuid())
  name       String
  power Int @default(0)
  employee Employee[]
}
model EchelonCategory {
  id       String  @id @default(uuid())
  name       String
  category   String
  power Int @default(0)
  employee Employee[]
}

model Site{
  id String @id @default(uuid())
  name String
  type TypeSite @default(ONFIELD)
  id_entity String
  Entity Entity @relation(fields: [id_entity], references: [id])
}

model EntityBank{
  id String @id @default(uuid())

  id_entity String
  entity Entity @relation(fields: [id_entity], references: [id])

  id_bank String
  bank Bank @relation(fields: [id_bank], references: [id])
}

model ExternalEntityBank{
  id String @id @default(uuid())

  id_external_entity String
  external_entity ExternalEntity @relation(fields: [id_external_entity], references: [id])

  id_bank String
  bank Bank @relation(fields: [id_bank], references: [id])
}

model EmployeeBank{
  id String @id @default(uuid())

  id_employee String
  employee Employee @relation(fields: [id_employee], references: [id])

  id_bank String
  bank Bank @relation(fields: [id_bank], references: [id])
}

model Bank{
  id String @id @default(uuid())
  name String
  sigle String
  Acronyme String

  bank_account BankAccount[]
  entity_bank EntityBank[]
  external_entity_bank ExternalEntityBank[]
  employee_bank EmployeeBank[]
}

model BankAccount{
  id String @id @default(uuid())
  
  account_number String
  amount String
  
  id_employee String?
  employee Employee? @relation(fields: [id_employee], references: [id])

  id_entity String?
  entity Entity? @relation(fields: [id_entity], references: [id])
  
  id_external_entity String?
  externalEntity ExternalEntity? @relation(fields: [id_external_entity], references: [id])

  id_bank String
  Bank Bank @relation(fields: [id_bank], references: [id])
}


model Product{
  id String @id @default(uuid())
  name String
  unit Float?
  description String
  id_entity String
  Entity Entity @relation(fields: [id_entity], references: [id])
}


enum TypeSite {
  HEADQUARTER 
  ONFIELD
}